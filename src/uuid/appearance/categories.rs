//! UUIDs for the categories module.

// This file is auto-generated by the update_uuids application.
// Based on https://bitbucket.org/bluetooth-SIG/public.git
// Commit hash: 43c96bbde30dc6937fba488adb22b6406e1b9cad

use super::BleUuid;

/// Bluetooth Appearance UUID. (0x000)
pub const UNKNOWN: BleUuid = BleUuid::from_category(0x000, 0x000);

/// Bluetooth Appearance UUID. (0x040)
pub const PHONE: BleUuid = BleUuid::from_category(0x001, 0x000);

pub mod computer {
    //! Appearance computer with subcategories.
    //!
    //! Generic variant named `GENERIC_COMPUTER`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x080)
    pub const GENERIC_COMPUTER: BleUuid = BleUuid::from_category(0x002, 0x000);

    /// Bluetooth Appearance UUID. (0x080)
    pub const DESKTOP_WORKSTATION: BleUuid = BleUuid::from_category(0x002, 0x001);

    /// Bluetooth Appearance UUID. (0x080)
    pub const SERVER_CLASS_COMPUTER: BleUuid = BleUuid::from_category(0x002, 0x002);

    /// Bluetooth Appearance UUID. (0x080)
    pub const LAPTOP: BleUuid = BleUuid::from_category(0x002, 0x003);

    /// Bluetooth Appearance UUID. (0x080)
    pub const HANDHELD_PCPDA_CLAMSHELL: BleUuid = BleUuid::from_category(0x002, 0x004);

    /// Bluetooth Appearance UUID. (0x080)
    pub const PALM_SIZE_PCPDA: BleUuid = BleUuid::from_category(0x002, 0x005);

    /// Bluetooth Appearance UUID. (0x080)
    pub const WEARABLE_COMPUTER_WATCH_SIZE: BleUuid = BleUuid::from_category(0x002, 0x006);

    /// Bluetooth Appearance UUID. (0x080)
    pub const TABLET: BleUuid = BleUuid::from_category(0x002, 0x007);

    /// Bluetooth Appearance UUID. (0x080)
    pub const DOCKING_STATION: BleUuid = BleUuid::from_category(0x002, 0x008);

    /// Bluetooth Appearance UUID. (0x080)
    pub const ALL_IN_ONE: BleUuid = BleUuid::from_category(0x002, 0x009);

    /// Bluetooth Appearance UUID. (0x080)
    pub const BLADE_SERVER: BleUuid = BleUuid::from_category(0x002, 0x00a);

    /// Bluetooth Appearance UUID. (0x080)
    pub const CONVERTIBLE: BleUuid = BleUuid::from_category(0x002, 0x00b);

    /// Bluetooth Appearance UUID. (0x080)
    pub const DETACHABLE: BleUuid = BleUuid::from_category(0x002, 0x00c);

    /// Bluetooth Appearance UUID. (0x080)
    pub const IOT_GATEWAY: BleUuid = BleUuid::from_category(0x002, 0x00d);

    /// Bluetooth Appearance UUID. (0x080)
    pub const MINI_PC: BleUuid = BleUuid::from_category(0x002, 0x00e);

    /// Bluetooth Appearance UUID. (0x080)
    pub const STICK_PC: BleUuid = BleUuid::from_category(0x002, 0x00f);
}

pub mod watch {
    //! Appearance watch with subcategories.
    //!
    //! Generic variant named `GENERIC_WATCH`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x0c0)
    pub const GENERIC_WATCH: BleUuid = BleUuid::from_category(0x003, 0x000);

    /// Bluetooth Appearance UUID. (0x0c0)
    pub const SPORTS_WATCH: BleUuid = BleUuid::from_category(0x003, 0x001);

    /// Bluetooth Appearance UUID. (0x0c0)
    pub const SMARTWATCH: BleUuid = BleUuid::from_category(0x003, 0x002);
}

/// Bluetooth Appearance UUID. (0x100)
pub const CLOCK: BleUuid = BleUuid::from_category(0x004, 0x000);

/// Bluetooth Appearance UUID. (0x140)
pub const DISPLAY: BleUuid = BleUuid::from_category(0x005, 0x000);

/// Bluetooth Appearance UUID. (0x180)
pub const REMOTE_CONTROL: BleUuid = BleUuid::from_category(0x006, 0x000);

/// Bluetooth Appearance UUID. (0x1c0)
pub const EYE_GLASSES: BleUuid = BleUuid::from_category(0x007, 0x000);

/// Bluetooth Appearance UUID. (0x200)
pub const TAG: BleUuid = BleUuid::from_category(0x008, 0x000);

/// Bluetooth Appearance UUID. (0x240)
pub const KEYRING: BleUuid = BleUuid::from_category(0x009, 0x000);

/// Bluetooth Appearance UUID. (0x280)
pub const MEDIA_PLAYER: BleUuid = BleUuid::from_category(0x00a, 0x000);

/// Bluetooth Appearance UUID. (0x2c0)
pub const BARCODE_SCANNER: BleUuid = BleUuid::from_category(0x00b, 0x000);

pub mod thermometer {
    //! Appearance thermometer with subcategories.
    //!
    //! Generic variant named `GENERIC_THERMOMETER`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x300)
    pub const GENERIC_THERMOMETER: BleUuid = BleUuid::from_category(0x00c, 0x000);

    /// Bluetooth Appearance UUID. (0x300)
    pub const EAR_THERMOMETER: BleUuid = BleUuid::from_category(0x00c, 0x001);
}

pub mod heart_rate_sensor {
    //! Appearance heart_rate_sensor with subcategories.
    //!
    //! Generic variant named `GENERIC_HEART_RATE_SENSOR`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x340)
    pub const GENERIC_HEART_RATE_SENSOR: BleUuid = BleUuid::from_category(0x00d, 0x000);

    /// Bluetooth Appearance UUID. (0x340)
    pub const HEART_RATE_BELT: BleUuid = BleUuid::from_category(0x00d, 0x001);
}

pub mod blood_pressure {
    //! Appearance blood_pressure with subcategories.
    //!
    //! Generic variant named `GENERIC_BLOOD_PRESSURE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x380)
    pub const GENERIC_BLOOD_PRESSURE: BleUuid = BleUuid::from_category(0x00e, 0x000);

    /// Bluetooth Appearance UUID. (0x380)
    pub const ARM_BLOOD_PRESSURE: BleUuid = BleUuid::from_category(0x00e, 0x001);

    /// Bluetooth Appearance UUID. (0x380)
    pub const WRIST_BLOOD_PRESSURE: BleUuid = BleUuid::from_category(0x00e, 0x002);
}

pub mod human_interface_device {
    //! Appearance human_interface_device with subcategories.
    //!
    //! Generic variant named `GENERIC_HUMAN_INTERFACE_DEVICE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const GENERIC_HUMAN_INTERFACE_DEVICE: BleUuid = BleUuid::from_category(0x00f, 0x000);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const KEYBOARD: BleUuid = BleUuid::from_category(0x00f, 0x001);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const MOUSE: BleUuid = BleUuid::from_category(0x00f, 0x002);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const JOYSTICK: BleUuid = BleUuid::from_category(0x00f, 0x003);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const GAMEPAD: BleUuid = BleUuid::from_category(0x00f, 0x004);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const DIGITIZER_TABLET: BleUuid = BleUuid::from_category(0x00f, 0x005);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const CARD_READER: BleUuid = BleUuid::from_category(0x00f, 0x006);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const DIGITAL_PEN: BleUuid = BleUuid::from_category(0x00f, 0x007);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const BARCODE_SCANNER: BleUuid = BleUuid::from_category(0x00f, 0x008);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const TOUCHPAD: BleUuid = BleUuid::from_category(0x00f, 0x009);

    /// Bluetooth Appearance UUID. (0x3c0)
    pub const PRESENTATION_REMOTE: BleUuid = BleUuid::from_category(0x00f, 0x00a);
}

/// Bluetooth Appearance UUID. (0x400)
pub const GLUCOSE_METER: BleUuid = BleUuid::from_category(0x010, 0x000);

pub mod running_walking_sensor {
    //! Appearance running_walking_sensor with subcategories.
    //!
    //! Generic variant named `GENERIC_RUNNING_WALKING_SENSOR`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x440)
    pub const GENERIC_RUNNING_WALKING_SENSOR: BleUuid = BleUuid::from_category(0x011, 0x000);

    /// Bluetooth Appearance UUID. (0x440)
    pub const IN_SHOE_RUNNING_WALKING_SENSOR: BleUuid = BleUuid::from_category(0x011, 0x001);

    /// Bluetooth Appearance UUID. (0x440)
    pub const ON_SHOE_RUNNING_WALKING_SENSOR: BleUuid = BleUuid::from_category(0x011, 0x002);

    /// Bluetooth Appearance UUID. (0x440)
    pub const ON_HIP_RUNNING_WALKING_SENSOR: BleUuid = BleUuid::from_category(0x011, 0x003);
}

pub mod cycling {
    //! Appearance cycling with subcategories.
    //!
    //! Generic variant named `GENERIC_CYCLING`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x480)
    pub const GENERIC_CYCLING: BleUuid = BleUuid::from_category(0x012, 0x000);

    /// Bluetooth Appearance UUID. (0x480)
    pub const CYCLING_COMPUTER: BleUuid = BleUuid::from_category(0x012, 0x001);

    /// Bluetooth Appearance UUID. (0x480)
    pub const SPEED_SENSOR: BleUuid = BleUuid::from_category(0x012, 0x002);

    /// Bluetooth Appearance UUID. (0x480)
    pub const CADENCE_SENSOR: BleUuid = BleUuid::from_category(0x012, 0x003);

    /// Bluetooth Appearance UUID. (0x480)
    pub const POWER_SENSOR: BleUuid = BleUuid::from_category(0x012, 0x004);

    /// Bluetooth Appearance UUID. (0x480)
    pub const SPEED_AND_CADENCE_SENSOR: BleUuid = BleUuid::from_category(0x012, 0x005);
}

pub mod control_device {
    //! Appearance control_device with subcategories.
    //!
    //! Generic variant named `GENERIC_CONTROL_DEVICE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const GENERIC_CONTROL_DEVICE: BleUuid = BleUuid::from_category(0x013, 0x000);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const SWITCH: BleUuid = BleUuid::from_category(0x013, 0x001);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const MULTI_SWITCH: BleUuid = BleUuid::from_category(0x013, 0x002);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const BUTTON: BleUuid = BleUuid::from_category(0x013, 0x003);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const SLIDER: BleUuid = BleUuid::from_category(0x013, 0x004);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const ROTARY_SWITCH: BleUuid = BleUuid::from_category(0x013, 0x005);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const TOUCH_PANEL: BleUuid = BleUuid::from_category(0x013, 0x006);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const SINGLE_SWITCH: BleUuid = BleUuid::from_category(0x013, 0x007);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const DOUBLE_SWITCH: BleUuid = BleUuid::from_category(0x013, 0x008);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const TRIPLE_SWITCH: BleUuid = BleUuid::from_category(0x013, 0x009);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const BATTERY_SWITCH: BleUuid = BleUuid::from_category(0x013, 0x00a);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const ENERGY_HARVESTING_SWITCH: BleUuid = BleUuid::from_category(0x013, 0x00b);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const PUSH_BUTTON: BleUuid = BleUuid::from_category(0x013, 0x00c);

    /// Bluetooth Appearance UUID. (0x4c0)
    pub const DIAL: BleUuid = BleUuid::from_category(0x013, 0x00d);
}

pub mod network_device {
    //! Appearance network_device with subcategories.
    //!
    //! Generic variant named `GENERIC_NETWORK_DEVICE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x500)
    pub const GENERIC_NETWORK_DEVICE: BleUuid = BleUuid::from_category(0x014, 0x000);

    /// Bluetooth Appearance UUID. (0x500)
    pub const ACCESS_POINT: BleUuid = BleUuid::from_category(0x014, 0x001);

    /// Bluetooth Appearance UUID. (0x500)
    pub const MESH_DEVICE: BleUuid = BleUuid::from_category(0x014, 0x002);

    /// Bluetooth Appearance UUID. (0x500)
    pub const MESH_NETWORK_PROXY: BleUuid = BleUuid::from_category(0x014, 0x003);
}

pub mod sensor {
    //! Appearance sensor with subcategories.
    //!
    //! Generic variant named `GENERIC_SENSOR`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x540)
    pub const GENERIC_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x000);

    /// Bluetooth Appearance UUID. (0x540)
    pub const MOTION_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x001);

    /// Bluetooth Appearance UUID. (0x540)
    pub const AIR_QUALITY_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x002);

    /// Bluetooth Appearance UUID. (0x540)
    pub const TEMPERATURE_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x003);

    /// Bluetooth Appearance UUID. (0x540)
    pub const HUMIDITY_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x004);

    /// Bluetooth Appearance UUID. (0x540)
    pub const LEAK_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x005);

    /// Bluetooth Appearance UUID. (0x540)
    pub const SMOKE_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x006);

    /// Bluetooth Appearance UUID. (0x540)
    pub const OCCUPANCY_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x007);

    /// Bluetooth Appearance UUID. (0x540)
    pub const CONTACT_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x008);

    /// Bluetooth Appearance UUID. (0x540)
    pub const CARBON_MONOXIDE_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x009);

    /// Bluetooth Appearance UUID. (0x540)
    pub const CARBON_DIOXIDE_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x00a);

    /// Bluetooth Appearance UUID. (0x540)
    pub const AMBIENT_LIGHT_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x00b);

    /// Bluetooth Appearance UUID. (0x540)
    pub const ENERGY_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x00c);

    /// Bluetooth Appearance UUID. (0x540)
    pub const COLOR_LIGHT_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x00d);

    /// Bluetooth Appearance UUID. (0x540)
    pub const RAIN_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x00e);

    /// Bluetooth Appearance UUID. (0x540)
    pub const FIRE_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x00f);

    /// Bluetooth Appearance UUID. (0x540)
    pub const WIND_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x010);

    /// Bluetooth Appearance UUID. (0x540)
    pub const PROXIMITY_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x011);

    /// Bluetooth Appearance UUID. (0x540)
    pub const MULTI_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x012);

    /// Bluetooth Appearance UUID. (0x540)
    pub const FLUSH_MOUNTED_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x013);

    /// Bluetooth Appearance UUID. (0x540)
    pub const CEILING_MOUNTED_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x014);

    /// Bluetooth Appearance UUID. (0x540)
    pub const WALL_MOUNTED_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x015);

    /// Bluetooth Appearance UUID. (0x540)
    pub const MULTISENSOR: BleUuid = BleUuid::from_category(0x015, 0x016);

    /// Bluetooth Appearance UUID. (0x540)
    pub const ENERGY_METER: BleUuid = BleUuid::from_category(0x015, 0x017);

    /// Bluetooth Appearance UUID. (0x540)
    pub const FLAME_DETECTOR: BleUuid = BleUuid::from_category(0x015, 0x018);

    /// Bluetooth Appearance UUID. (0x540)
    pub const VEHICLE_TIRE_PRESSURE_SENSOR: BleUuid = BleUuid::from_category(0x015, 0x019);
}

pub mod light_fixtures {
    //! Appearance light_fixtures with subcategories.
    //!
    //! Generic variant named `GENERIC_LIGHT_FIXTURES`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x580)
    pub const GENERIC_LIGHT_FIXTURES: BleUuid = BleUuid::from_category(0x016, 0x000);

    /// Bluetooth Appearance UUID. (0x580)
    pub const WALL_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x001);

    /// Bluetooth Appearance UUID. (0x580)
    pub const CEILING_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x002);

    /// Bluetooth Appearance UUID. (0x580)
    pub const FLOOR_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x003);

    /// Bluetooth Appearance UUID. (0x580)
    pub const CABINET_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x004);

    /// Bluetooth Appearance UUID. (0x580)
    pub const DESK_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x005);

    /// Bluetooth Appearance UUID. (0x580)
    pub const TROFFER_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x006);

    /// Bluetooth Appearance UUID. (0x580)
    pub const PENDANT_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x007);

    /// Bluetooth Appearance UUID. (0x580)
    pub const IN_GROUND_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x008);

    /// Bluetooth Appearance UUID. (0x580)
    pub const FLOOD_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x009);

    /// Bluetooth Appearance UUID. (0x580)
    pub const UNDERWATER_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x00a);

    /// Bluetooth Appearance UUID. (0x580)
    pub const BOLLARD_WITH_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x00b);

    /// Bluetooth Appearance UUID. (0x580)
    pub const PATHWAY_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x00c);

    /// Bluetooth Appearance UUID. (0x580)
    pub const GARDEN_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x00d);

    /// Bluetooth Appearance UUID. (0x580)
    pub const POLE_TOP_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x00e);

    /// Bluetooth Appearance UUID. (0x580)
    pub const SPOTLIGHT: BleUuid = BleUuid::from_category(0x016, 0x00f);

    /// Bluetooth Appearance UUID. (0x580)
    pub const LINEAR_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x010);

    /// Bluetooth Appearance UUID. (0x580)
    pub const STREET_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x011);

    /// Bluetooth Appearance UUID. (0x580)
    pub const SHELVES_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x012);

    /// Bluetooth Appearance UUID. (0x580)
    pub const BAY_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x013);

    /// Bluetooth Appearance UUID. (0x580)
    pub const EMERGENCY_EXIT_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x014);

    /// Bluetooth Appearance UUID. (0x580)
    pub const LIGHT_CONTROLLER: BleUuid = BleUuid::from_category(0x016, 0x015);

    /// Bluetooth Appearance UUID. (0x580)
    pub const LIGHT_DRIVER: BleUuid = BleUuid::from_category(0x016, 0x016);

    /// Bluetooth Appearance UUID. (0x580)
    pub const BULB: BleUuid = BleUuid::from_category(0x016, 0x017);

    /// Bluetooth Appearance UUID. (0x580)
    pub const LOW_BAY_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x018);

    /// Bluetooth Appearance UUID. (0x580)
    pub const HIGH_BAY_LIGHT: BleUuid = BleUuid::from_category(0x016, 0x019);
}

pub mod fan {
    //! Appearance fan with subcategories.
    //!
    //! Generic variant named `GENERIC_FAN`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x5c0)
    pub const GENERIC_FAN: BleUuid = BleUuid::from_category(0x017, 0x000);

    /// Bluetooth Appearance UUID. (0x5c0)
    pub const CEILING_FAN: BleUuid = BleUuid::from_category(0x017, 0x001);

    /// Bluetooth Appearance UUID. (0x5c0)
    pub const AXIAL_FAN: BleUuid = BleUuid::from_category(0x017, 0x002);

    /// Bluetooth Appearance UUID. (0x5c0)
    pub const EXHAUST_FAN: BleUuid = BleUuid::from_category(0x017, 0x003);

    /// Bluetooth Appearance UUID. (0x5c0)
    pub const PEDESTAL_FAN: BleUuid = BleUuid::from_category(0x017, 0x004);

    /// Bluetooth Appearance UUID. (0x5c0)
    pub const DESK_FAN: BleUuid = BleUuid::from_category(0x017, 0x005);

    /// Bluetooth Appearance UUID. (0x5c0)
    pub const WALL_FAN: BleUuid = BleUuid::from_category(0x017, 0x006);
}

pub mod hvac {
    //! Appearance hvac with subcategories.
    //!
    //! Generic variant named `GENERIC_HVAC`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x600)
    pub const GENERIC_HVAC: BleUuid = BleUuid::from_category(0x018, 0x000);

    /// Bluetooth Appearance UUID. (0x600)
    pub const THERMOSTAT: BleUuid = BleUuid::from_category(0x018, 0x001);

    /// Bluetooth Appearance UUID. (0x600)
    pub const HUMIDIFIER: BleUuid = BleUuid::from_category(0x018, 0x002);

    /// Bluetooth Appearance UUID. (0x600)
    pub const DE_HUMIDIFIER: BleUuid = BleUuid::from_category(0x018, 0x003);

    /// Bluetooth Appearance UUID. (0x600)
    pub const HEATER: BleUuid = BleUuid::from_category(0x018, 0x004);

    /// Bluetooth Appearance UUID. (0x600)
    pub const RADIATOR: BleUuid = BleUuid::from_category(0x018, 0x005);

    /// Bluetooth Appearance UUID. (0x600)
    pub const BOILER: BleUuid = BleUuid::from_category(0x018, 0x006);

    /// Bluetooth Appearance UUID. (0x600)
    pub const HEAT_PUMP: BleUuid = BleUuid::from_category(0x018, 0x007);

    /// Bluetooth Appearance UUID. (0x600)
    pub const INFRARED_HEATER: BleUuid = BleUuid::from_category(0x018, 0x008);

    /// Bluetooth Appearance UUID. (0x600)
    pub const RADIANT_PANEL_HEATER: BleUuid = BleUuid::from_category(0x018, 0x009);

    /// Bluetooth Appearance UUID. (0x600)
    pub const FAN_HEATER: BleUuid = BleUuid::from_category(0x018, 0x00a);

    /// Bluetooth Appearance UUID. (0x600)
    pub const AIR_CURTAIN: BleUuid = BleUuid::from_category(0x018, 0x00b);
}

/// Bluetooth Appearance UUID. (0x640)
pub const AIR_CONDITIONING: BleUuid = BleUuid::from_category(0x019, 0x000);

/// Bluetooth Appearance UUID. (0x680)
pub const HUMIDIFIER: BleUuid = BleUuid::from_category(0x01a, 0x000);

pub mod heating {
    //! Appearance heating with subcategories.
    //!
    //! Generic variant named `GENERIC_HEATING`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x6c0)
    pub const GENERIC_HEATING: BleUuid = BleUuid::from_category(0x01b, 0x000);

    /// Bluetooth Appearance UUID. (0x6c0)
    pub const RADIATOR: BleUuid = BleUuid::from_category(0x01b, 0x001);

    /// Bluetooth Appearance UUID. (0x6c0)
    pub const BOILER: BleUuid = BleUuid::from_category(0x01b, 0x002);

    /// Bluetooth Appearance UUID. (0x6c0)
    pub const HEAT_PUMP: BleUuid = BleUuid::from_category(0x01b, 0x003);

    /// Bluetooth Appearance UUID. (0x6c0)
    pub const INFRARED_HEATER: BleUuid = BleUuid::from_category(0x01b, 0x004);

    /// Bluetooth Appearance UUID. (0x6c0)
    pub const RADIANT_PANEL_HEATER: BleUuid = BleUuid::from_category(0x01b, 0x005);

    /// Bluetooth Appearance UUID. (0x6c0)
    pub const FAN_HEATER: BleUuid = BleUuid::from_category(0x01b, 0x006);

    /// Bluetooth Appearance UUID. (0x6c0)
    pub const AIR_CURTAIN: BleUuid = BleUuid::from_category(0x01b, 0x007);
}

pub mod access_control {
    //! Appearance access_control with subcategories.
    //!
    //! Generic variant named `GENERIC_ACCESS_CONTROL`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x700)
    pub const GENERIC_ACCESS_CONTROL: BleUuid = BleUuid::from_category(0x01c, 0x000);

    /// Bluetooth Appearance UUID. (0x700)
    pub const ACCESS_DOOR: BleUuid = BleUuid::from_category(0x01c, 0x001);

    /// Bluetooth Appearance UUID. (0x700)
    pub const GARAGE_DOOR: BleUuid = BleUuid::from_category(0x01c, 0x002);

    /// Bluetooth Appearance UUID. (0x700)
    pub const EMERGENCY_EXIT_DOOR: BleUuid = BleUuid::from_category(0x01c, 0x003);

    /// Bluetooth Appearance UUID. (0x700)
    pub const ACCESS_LOCK: BleUuid = BleUuid::from_category(0x01c, 0x004);

    /// Bluetooth Appearance UUID. (0x700)
    pub const ELEVATOR: BleUuid = BleUuid::from_category(0x01c, 0x005);

    /// Bluetooth Appearance UUID. (0x700)
    pub const WINDOW: BleUuid = BleUuid::from_category(0x01c, 0x006);

    /// Bluetooth Appearance UUID. (0x700)
    pub const ENTRANCE_GATE: BleUuid = BleUuid::from_category(0x01c, 0x007);

    /// Bluetooth Appearance UUID. (0x700)
    pub const DOOR_LOCK: BleUuid = BleUuid::from_category(0x01c, 0x008);

    /// Bluetooth Appearance UUID. (0x700)
    pub const LOCKER: BleUuid = BleUuid::from_category(0x01c, 0x009);
}

pub mod motorized_device {
    //! Appearance motorized_device with subcategories.
    //!
    //! Generic variant named `GENERIC_MOTORIZED_DEVICE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x740)
    pub const GENERIC_MOTORIZED_DEVICE: BleUuid = BleUuid::from_category(0x01d, 0x000);

    /// Bluetooth Appearance UUID. (0x740)
    pub const MOTORIZED_GATE: BleUuid = BleUuid::from_category(0x01d, 0x001);

    /// Bluetooth Appearance UUID. (0x740)
    pub const AWNING: BleUuid = BleUuid::from_category(0x01d, 0x002);

    /// Bluetooth Appearance UUID. (0x740)
    pub const BLINDS_OR_SHADES: BleUuid = BleUuid::from_category(0x01d, 0x003);

    /// Bluetooth Appearance UUID. (0x740)
    pub const CURTAINS: BleUuid = BleUuid::from_category(0x01d, 0x004);

    /// Bluetooth Appearance UUID. (0x740)
    pub const SCREEN: BleUuid = BleUuid::from_category(0x01d, 0x005);
}

pub mod power_device {
    //! Appearance power_device with subcategories.
    //!
    //! Generic variant named `GENERIC_POWER_DEVICE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x780)
    pub const GENERIC_POWER_DEVICE: BleUuid = BleUuid::from_category(0x01e, 0x000);

    /// Bluetooth Appearance UUID. (0x780)
    pub const POWER_OUTLET: BleUuid = BleUuid::from_category(0x01e, 0x001);

    /// Bluetooth Appearance UUID. (0x780)
    pub const POWER_STRIP: BleUuid = BleUuid::from_category(0x01e, 0x002);

    /// Bluetooth Appearance UUID. (0x780)
    pub const PLUG: BleUuid = BleUuid::from_category(0x01e, 0x003);

    /// Bluetooth Appearance UUID. (0x780)
    pub const POWER_SUPPLY: BleUuid = BleUuid::from_category(0x01e, 0x004);

    /// Bluetooth Appearance UUID. (0x780)
    pub const LED_DRIVER: BleUuid = BleUuid::from_category(0x01e, 0x005);

    /// Bluetooth Appearance UUID. (0x780)
    pub const FLUORESCENT_LAMP_GEAR: BleUuid = BleUuid::from_category(0x01e, 0x006);

    /// Bluetooth Appearance UUID. (0x780)
    pub const HID_LAMP_GEAR: BleUuid = BleUuid::from_category(0x01e, 0x007);

    /// Bluetooth Appearance UUID. (0x780)
    pub const CHARGE_CASE: BleUuid = BleUuid::from_category(0x01e, 0x008);

    /// Bluetooth Appearance UUID. (0x780)
    pub const POWER_BANK: BleUuid = BleUuid::from_category(0x01e, 0x009);
}

pub mod light_source {
    //! Appearance light_source with subcategories.
    //!
    //! Generic variant named `GENERIC_LIGHT_SOURCE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const GENERIC_LIGHT_SOURCE: BleUuid = BleUuid::from_category(0x01f, 0x000);

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const INCANDESCENT_LIGHT_BULB: BleUuid = BleUuid::from_category(0x01f, 0x001);

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const LED_LAMP: BleUuid = BleUuid::from_category(0x01f, 0x002);

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const HID_LAMP: BleUuid = BleUuid::from_category(0x01f, 0x003);

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const FLUORESCENT_LAMP: BleUuid = BleUuid::from_category(0x01f, 0x004);

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const LED_ARRAY: BleUuid = BleUuid::from_category(0x01f, 0x005);

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const MULTI_COLOR_LED_ARRAY: BleUuid = BleUuid::from_category(0x01f, 0x006);

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const LOW_VOLTAGE_HALOGEN: BleUuid = BleUuid::from_category(0x01f, 0x007);

    /// Bluetooth Appearance UUID. (0x7c0)
    pub const ORGANIC_LIGHT_EMITTING_DIODE_OLED: BleUuid = BleUuid::from_category(0x01f, 0x008);
}

pub mod window_covering {
    //! Appearance window_covering with subcategories.
    //!
    //! Generic variant named `GENERIC_WINDOW_COVERING`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x800)
    pub const GENERIC_WINDOW_COVERING: BleUuid = BleUuid::from_category(0x020, 0x000);

    /// Bluetooth Appearance UUID. (0x800)
    pub const WINDOW_SHADES: BleUuid = BleUuid::from_category(0x020, 0x001);

    /// Bluetooth Appearance UUID. (0x800)
    pub const WINDOW_BLINDS: BleUuid = BleUuid::from_category(0x020, 0x002);

    /// Bluetooth Appearance UUID. (0x800)
    pub const WINDOW_AWNING: BleUuid = BleUuid::from_category(0x020, 0x003);

    /// Bluetooth Appearance UUID. (0x800)
    pub const WINDOW_CURTAIN: BleUuid = BleUuid::from_category(0x020, 0x004);

    /// Bluetooth Appearance UUID. (0x800)
    pub const EXTERIOR_SHUTTER: BleUuid = BleUuid::from_category(0x020, 0x005);

    /// Bluetooth Appearance UUID. (0x800)
    pub const EXTERIOR_SCREEN: BleUuid = BleUuid::from_category(0x020, 0x006);
}

pub mod audio_sink {
    //! Appearance audio_sink with subcategories.
    //!
    //! Generic variant named `GENERIC_AUDIO_SINK`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x840)
    pub const GENERIC_AUDIO_SINK: BleUuid = BleUuid::from_category(0x021, 0x000);

    /// Bluetooth Appearance UUID. (0x840)
    pub const STANDALONE_SPEAKER: BleUuid = BleUuid::from_category(0x021, 0x001);

    /// Bluetooth Appearance UUID. (0x840)
    pub const SOUNDBAR: BleUuid = BleUuid::from_category(0x021, 0x002);

    /// Bluetooth Appearance UUID. (0x840)
    pub const BOOKSHELF_SPEAKER: BleUuid = BleUuid::from_category(0x021, 0x003);

    /// Bluetooth Appearance UUID. (0x840)
    pub const STANDMOUNTED_SPEAKER: BleUuid = BleUuid::from_category(0x021, 0x004);

    /// Bluetooth Appearance UUID. (0x840)
    pub const SPEAKERPHONE: BleUuid = BleUuid::from_category(0x021, 0x005);
}

pub mod audio_source {
    //! Appearance audio_source with subcategories.
    //!
    //! Generic variant named `GENERIC_AUDIO_SOURCE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x880)
    pub const GENERIC_AUDIO_SOURCE: BleUuid = BleUuid::from_category(0x022, 0x000);

    /// Bluetooth Appearance UUID. (0x880)
    pub const MICROPHONE: BleUuid = BleUuid::from_category(0x022, 0x001);

    /// Bluetooth Appearance UUID. (0x880)
    pub const ALARM: BleUuid = BleUuid::from_category(0x022, 0x002);

    /// Bluetooth Appearance UUID. (0x880)
    pub const BELL: BleUuid = BleUuid::from_category(0x022, 0x003);

    /// Bluetooth Appearance UUID. (0x880)
    pub const HORN: BleUuid = BleUuid::from_category(0x022, 0x004);

    /// Bluetooth Appearance UUID. (0x880)
    pub const BROADCASTING_DEVICE: BleUuid = BleUuid::from_category(0x022, 0x005);

    /// Bluetooth Appearance UUID. (0x880)
    pub const SERVICE_DESK: BleUuid = BleUuid::from_category(0x022, 0x006);

    /// Bluetooth Appearance UUID. (0x880)
    pub const KIOSK: BleUuid = BleUuid::from_category(0x022, 0x007);

    /// Bluetooth Appearance UUID. (0x880)
    pub const BROADCASTING_ROOM: BleUuid = BleUuid::from_category(0x022, 0x008);

    /// Bluetooth Appearance UUID. (0x880)
    pub const AUDITORIUM: BleUuid = BleUuid::from_category(0x022, 0x009);
}

pub mod motorized_vehicle {
    //! Appearance motorized_vehicle with subcategories.
    //!
    //! Generic variant named `GENERIC_MOTORIZED_VEHICLE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const GENERIC_MOTORIZED_VEHICLE: BleUuid = BleUuid::from_category(0x023, 0x000);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const CAR: BleUuid = BleUuid::from_category(0x023, 0x001);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const LARGE_GOODS_VEHICLE: BleUuid = BleUuid::from_category(0x023, 0x002);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const _2_WHEELED_VEHICLE: BleUuid = BleUuid::from_category(0x023, 0x003);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const MOTORBIKE: BleUuid = BleUuid::from_category(0x023, 0x004);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const SCOOTER: BleUuid = BleUuid::from_category(0x023, 0x005);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const MOPED: BleUuid = BleUuid::from_category(0x023, 0x006);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const _3_WHEELED_VEHICLE: BleUuid = BleUuid::from_category(0x023, 0x007);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const LIGHT_VEHICLE: BleUuid = BleUuid::from_category(0x023, 0x008);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const QUAD_BIKE: BleUuid = BleUuid::from_category(0x023, 0x009);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const MINIBUS: BleUuid = BleUuid::from_category(0x023, 0x00a);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const BUS: BleUuid = BleUuid::from_category(0x023, 0x00b);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const TROLLEY: BleUuid = BleUuid::from_category(0x023, 0x00c);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const AGRICULTURAL_VEHICLE: BleUuid = BleUuid::from_category(0x023, 0x00d);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const CAMPER_CARAVAN: BleUuid = BleUuid::from_category(0x023, 0x00e);

    /// Bluetooth Appearance UUID. (0x8c0)
    pub const RECREATIONAL_VEHICLE_MOTOR_HOME: BleUuid = BleUuid::from_category(0x023, 0x00f);
}

pub mod domestic_appliance {
    //! Appearance domestic_appliance with subcategories.
    //!
    //! Generic variant named `GENERIC_DOMESTIC_APPLIANCE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x900)
    pub const GENERIC_DOMESTIC_APPLIANCE: BleUuid = BleUuid::from_category(0x024, 0x000);

    /// Bluetooth Appearance UUID. (0x900)
    pub const REFRIGERATOR: BleUuid = BleUuid::from_category(0x024, 0x001);

    /// Bluetooth Appearance UUID. (0x900)
    pub const FREEZER: BleUuid = BleUuid::from_category(0x024, 0x002);

    /// Bluetooth Appearance UUID. (0x900)
    pub const OVEN: BleUuid = BleUuid::from_category(0x024, 0x003);

    /// Bluetooth Appearance UUID. (0x900)
    pub const MICROWAVE: BleUuid = BleUuid::from_category(0x024, 0x004);

    /// Bluetooth Appearance UUID. (0x900)
    pub const TOASTER: BleUuid = BleUuid::from_category(0x024, 0x005);

    /// Bluetooth Appearance UUID. (0x900)
    pub const WASHING_MACHINE: BleUuid = BleUuid::from_category(0x024, 0x006);

    /// Bluetooth Appearance UUID. (0x900)
    pub const DRYER: BleUuid = BleUuid::from_category(0x024, 0x007);

    /// Bluetooth Appearance UUID. (0x900)
    pub const COFFEE_MAKER: BleUuid = BleUuid::from_category(0x024, 0x008);

    /// Bluetooth Appearance UUID. (0x900)
    pub const CLOTHES_IRON: BleUuid = BleUuid::from_category(0x024, 0x009);

    /// Bluetooth Appearance UUID. (0x900)
    pub const CURLING_IRON: BleUuid = BleUuid::from_category(0x024, 0x00a);

    /// Bluetooth Appearance UUID. (0x900)
    pub const HAIR_DRYER: BleUuid = BleUuid::from_category(0x024, 0x00b);

    /// Bluetooth Appearance UUID. (0x900)
    pub const VACUUM_CLEANER: BleUuid = BleUuid::from_category(0x024, 0x00c);

    /// Bluetooth Appearance UUID. (0x900)
    pub const ROBOTIC_VACUUM_CLEANER: BleUuid = BleUuid::from_category(0x024, 0x00d);

    /// Bluetooth Appearance UUID. (0x900)
    pub const RICE_COOKER: BleUuid = BleUuid::from_category(0x024, 0x00e);

    /// Bluetooth Appearance UUID. (0x900)
    pub const CLOTHES_STEAMER: BleUuid = BleUuid::from_category(0x024, 0x00f);
}

pub mod wearable_audio_device {
    //! Appearance wearable_audio_device with subcategories.
    //!
    //! Generic variant named `GENERIC_WEARABLE_AUDIO_DEVICE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x940)
    pub const GENERIC_WEARABLE_AUDIO_DEVICE: BleUuid = BleUuid::from_category(0x025, 0x000);

    /// Bluetooth Appearance UUID. (0x940)
    pub const EARBUD: BleUuid = BleUuid::from_category(0x025, 0x001);

    /// Bluetooth Appearance UUID. (0x940)
    pub const HEADSET: BleUuid = BleUuid::from_category(0x025, 0x002);

    /// Bluetooth Appearance UUID. (0x940)
    pub const HEADPHONES: BleUuid = BleUuid::from_category(0x025, 0x003);

    /// Bluetooth Appearance UUID. (0x940)
    pub const NECK_BAND: BleUuid = BleUuid::from_category(0x025, 0x004);
}

pub mod aircraft {
    //! Appearance aircraft with subcategories.
    //!
    //! Generic variant named `GENERIC_AIRCRAFT`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x980)
    pub const GENERIC_AIRCRAFT: BleUuid = BleUuid::from_category(0x026, 0x000);

    /// Bluetooth Appearance UUID. (0x980)
    pub const LIGHT_AIRCRAFT: BleUuid = BleUuid::from_category(0x026, 0x001);

    /// Bluetooth Appearance UUID. (0x980)
    pub const MICROLIGHT: BleUuid = BleUuid::from_category(0x026, 0x002);

    /// Bluetooth Appearance UUID. (0x980)
    pub const PARAGLIDER: BleUuid = BleUuid::from_category(0x026, 0x003);

    /// Bluetooth Appearance UUID. (0x980)
    pub const LARGE_PASSENGER_AIRCRAFT: BleUuid = BleUuid::from_category(0x026, 0x004);
}

pub mod av_equipment {
    //! Appearance av_equipment with subcategories.
    //!
    //! Generic variant named `GENERIC_AV_EQUIPMENT`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const GENERIC_AV_EQUIPMENT: BleUuid = BleUuid::from_category(0x027, 0x000);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const AMPLIFIER: BleUuid = BleUuid::from_category(0x027, 0x001);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const RECEIVER: BleUuid = BleUuid::from_category(0x027, 0x002);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const RADIO: BleUuid = BleUuid::from_category(0x027, 0x003);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const TUNER: BleUuid = BleUuid::from_category(0x027, 0x004);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const TURNTABLE: BleUuid = BleUuid::from_category(0x027, 0x005);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const CD_PLAYER: BleUuid = BleUuid::from_category(0x027, 0x006);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const DVD_PLAYER: BleUuid = BleUuid::from_category(0x027, 0x007);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const BLURAY_PLAYER: BleUuid = BleUuid::from_category(0x027, 0x008);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const OPTICAL_DISC_PLAYER: BleUuid = BleUuid::from_category(0x027, 0x009);

    /// Bluetooth Appearance UUID. (0x9c0)
    pub const SET_TOP_BOX: BleUuid = BleUuid::from_category(0x027, 0x00a);
}

pub mod display_equipment {
    //! Appearance display_equipment with subcategories.
    //!
    //! Generic variant named `GENERIC_DISPLAY_EQUIPMENT`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0xa00)
    pub const GENERIC_DISPLAY_EQUIPMENT: BleUuid = BleUuid::from_category(0x028, 0x000);

    /// Bluetooth Appearance UUID. (0xa00)
    pub const TELEVISION: BleUuid = BleUuid::from_category(0x028, 0x001);

    /// Bluetooth Appearance UUID. (0xa00)
    pub const MONITOR: BleUuid = BleUuid::from_category(0x028, 0x002);

    /// Bluetooth Appearance UUID. (0xa00)
    pub const PROJECTOR: BleUuid = BleUuid::from_category(0x028, 0x003);
}

pub mod hearing_aid {
    //! Appearance hearing_aid with subcategories.
    //!
    //! Generic variant named `GENERIC_HEARING_AID`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0xa40)
    pub const GENERIC_HEARING_AID: BleUuid = BleUuid::from_category(0x029, 0x000);

    /// Bluetooth Appearance UUID. (0xa40)
    pub const IN_EAR_HEARING_AID: BleUuid = BleUuid::from_category(0x029, 0x001);

    /// Bluetooth Appearance UUID. (0xa40)
    pub const BEHIND_EAR_HEARING_AID: BleUuid = BleUuid::from_category(0x029, 0x002);

    /// Bluetooth Appearance UUID. (0xa40)
    pub const COCHLEAR_IMPLANT: BleUuid = BleUuid::from_category(0x029, 0x003);
}

pub mod gaming {
    //! Appearance gaming with subcategories.
    //!
    //! Generic variant named `GENERIC_GAMING`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0xa80)
    pub const GENERIC_GAMING: BleUuid = BleUuid::from_category(0x02a, 0x000);

    /// Bluetooth Appearance UUID. (0xa80)
    pub const HOME_VIDEO_GAME_CONSOLE: BleUuid = BleUuid::from_category(0x02a, 0x001);

    /// Bluetooth Appearance UUID. (0xa80)
    pub const PORTABLE_HANDHELD_CONSOLE: BleUuid = BleUuid::from_category(0x02a, 0x002);
}

pub mod signage {
    //! Appearance signage with subcategories.
    //!
    //! Generic variant named `GENERIC_SIGNAGE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0xac0)
    pub const GENERIC_SIGNAGE: BleUuid = BleUuid::from_category(0x02b, 0x000);

    /// Bluetooth Appearance UUID. (0xac0)
    pub const DIGITAL_SIGNAGE: BleUuid = BleUuid::from_category(0x02b, 0x001);

    /// Bluetooth Appearance UUID. (0xac0)
    pub const ELECTRONIC_LABEL: BleUuid = BleUuid::from_category(0x02b, 0x002);
}

pub mod pulse_oximeter {
    //! Appearance pulse_oximeter with subcategories.
    //!
    //! Generic variant named `GENERIC_PULSE_OXIMETER`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0xc40)
    pub const GENERIC_PULSE_OXIMETER: BleUuid = BleUuid::from_category(0x031, 0x000);

    /// Bluetooth Appearance UUID. (0xc40)
    pub const FINGERTIP_PULSE_OXIMETER: BleUuid = BleUuid::from_category(0x031, 0x001);

    /// Bluetooth Appearance UUID. (0xc40)
    pub const WRIST_WORN_PULSE_OXIMETER: BleUuid = BleUuid::from_category(0x031, 0x002);
}

/// Bluetooth Appearance UUID. (0xc80)
pub const WEIGHT_SCALE: BleUuid = BleUuid::from_category(0x032, 0x000);

pub mod personal_mobility_device {
    //! Appearance personal_mobility_device with subcategories.
    //!
    //! Generic variant named `GENERIC_PERSONAL_MOBILITY_DEVICE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0xcc0)
    pub const GENERIC_PERSONAL_MOBILITY_DEVICE: BleUuid = BleUuid::from_category(0x033, 0x000);

    /// Bluetooth Appearance UUID. (0xcc0)
    pub const POWERED_WHEELCHAIR: BleUuid = BleUuid::from_category(0x033, 0x001);

    /// Bluetooth Appearance UUID. (0xcc0)
    pub const MOBILITY_SCOOTER: BleUuid = BleUuid::from_category(0x033, 0x002);
}

/// Bluetooth Appearance UUID. (0xd00)
pub const CONTINUOUS_GLUCOSE_MONITOR: BleUuid = BleUuid::from_category(0x034, 0x000);

pub mod insulin_pump {
    //! Appearance insulin_pump with subcategories.
    //!
    //! Generic variant named `GENERIC_INSULIN_PUMP`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0xd40)
    pub const GENERIC_INSULIN_PUMP: BleUuid = BleUuid::from_category(0x035, 0x000);

    /// Bluetooth Appearance UUID. (0xd40)
    pub const INSULIN_PUMP_DURABLE_PUMP: BleUuid = BleUuid::from_category(0x035, 0x001);

    /// Bluetooth Appearance UUID. (0xd40)
    pub const INSULIN_PUMP_PATCH_PUMP: BleUuid = BleUuid::from_category(0x035, 0x004);

    /// Bluetooth Appearance UUID. (0xd40)
    pub const INSULIN_PEN: BleUuid = BleUuid::from_category(0x035, 0x008);
}

/// Bluetooth Appearance UUID. (0xd80)
pub const MEDICATION_DELIVERY: BleUuid = BleUuid::from_category(0x036, 0x000);

pub mod spirometer {
    //! Appearance spirometer with subcategories.
    //!
    //! Generic variant named `GENERIC_SPIROMETER`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0xdc0)
    pub const GENERIC_SPIROMETER: BleUuid = BleUuid::from_category(0x037, 0x000);

    /// Bluetooth Appearance UUID. (0xdc0)
    pub const HANDHELD_SPIROMETER: BleUuid = BleUuid::from_category(0x037, 0x001);
}

pub mod outdoor_sports_activity {
    //! Appearance outdoor_sports_activity with subcategories.
    //!
    //! Generic variant named `GENERIC_OUTDOOR_SPORTS_ACTIVITY`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x1440)
    pub const GENERIC_OUTDOOR_SPORTS_ACTIVITY: BleUuid = BleUuid::from_category(0x051, 0x000);

    /// Bluetooth Appearance UUID. (0x1440)
    pub const LOCATION_DISPLAY: BleUuid = BleUuid::from_category(0x051, 0x001);

    /// Bluetooth Appearance UUID. (0x1440)
    pub const LOCATION_AND_NAVIGATION_DISPLAY: BleUuid = BleUuid::from_category(0x051, 0x002);

    /// Bluetooth Appearance UUID. (0x1440)
    pub const LOCATION_POD: BleUuid = BleUuid::from_category(0x051, 0x003);

    /// Bluetooth Appearance UUID. (0x1440)
    pub const LOCATION_AND_NAVIGATION_POD: BleUuid = BleUuid::from_category(0x051, 0x004);
}

pub mod industrial_measurement_device {
    //! Appearance industrial_measurement_device with subcategories.
    //!
    //! Generic variant named `GENERIC_INDUSTRIAL_MEASUREMENT_DEVICE`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x1480)
    pub const GENERIC_INDUSTRIAL_MEASUREMENT_DEVICE: BleUuid = BleUuid::from_category(0x052, 0x000);

    /// Bluetooth Appearance UUID. (0x1480)
    pub const TORQUE_TESTING_DEVICE: BleUuid = BleUuid::from_category(0x052, 0x001);

    /// Bluetooth Appearance UUID. (0x1480)
    pub const CALIPER: BleUuid = BleUuid::from_category(0x052, 0x002);

    /// Bluetooth Appearance UUID. (0x1480)
    pub const DIAL_INDICATOR: BleUuid = BleUuid::from_category(0x052, 0x003);

    /// Bluetooth Appearance UUID. (0x1480)
    pub const MICROMETER: BleUuid = BleUuid::from_category(0x052, 0x004);

    /// Bluetooth Appearance UUID. (0x1480)
    pub const HEIGHT_GAUGE: BleUuid = BleUuid::from_category(0x052, 0x005);

    /// Bluetooth Appearance UUID. (0x1480)
    pub const FORCE_GAUGE: BleUuid = BleUuid::from_category(0x052, 0x006);
}

pub mod industrial_tools {
    //! Appearance industrial_tools with subcategories.
    //!
    //! Generic variant named `GENERIC_INDUSTRIAL_TOOLS`.

    use super::super::BleUuid;

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const GENERIC_INDUSTRIAL_TOOLS: BleUuid = BleUuid::from_category(0x053, 0x000);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const MACHINE_TOOL_HOLDER: BleUuid = BleUuid::from_category(0x053, 0x001);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const GENERIC_CLAMPING_DEVICE: BleUuid = BleUuid::from_category(0x053, 0x002);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const CLAMPING_JAWSJAW_CHUCK: BleUuid = BleUuid::from_category(0x053, 0x003);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const CLAMPING_COLLET_CHUCK: BleUuid = BleUuid::from_category(0x053, 0x004);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const CLAMPING_MANDREL: BleUuid = BleUuid::from_category(0x053, 0x005);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const VISE: BleUuid = BleUuid::from_category(0x053, 0x006);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const ZERO_POINT_CLAMPING_SYSTEM: BleUuid = BleUuid::from_category(0x053, 0x007);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const TORQUE_WRENCH: BleUuid = BleUuid::from_category(0x053, 0x008);

    /// Bluetooth Appearance UUID. (0x14c0)
    pub const TORQUE_SCREWDRIVER: BleUuid = BleUuid::from_category(0x053, 0x009);
}
