use crate::{utils::screaming_snake_case, yaml::UuidData};
use std::{collections::HashMap, error::Error, fs::File, io::Write, path::Path};

/// Update the UUIDs in the source code
pub fn update_uuids(output_folder: &Path, uuid_map: &HashMap<String, Vec<UuidData>>) -> Result<(), Box<dyn Error>> {
    // each key in the map is a module name
    // each value is a list of UUIDs, which will be written as constants
    // in the form `pub const UUID_NAME: BleUuid = BleUuid::new(uuid, id);`
    for (file_name, uuids) in uuid_map {
        let file_name = file_name.replace("_uuids", "").replace(".yaml", "");
        let file_path = output_folder.join(format!("{}.rs", file_name));
        // clear the file if it exists
        if file_path.exists() {
            std::fs::remove_file(&file_path)?;
        }
        let mut file = File::create(file_path)?;
        let constants: Vec<_> = uuids
            .iter()
            .map(|uuid| {
                format!(
                    "pub const {}: BleUuid = BleUuid::new(0x{:x}, {:?});",
                    screaming_snake_case(&uuid.name),
                    uuid.uuid,
                    uuid.id
                )
            })
            .collect();
        let tokens = constants.join("\n\n");

        // construct the header docstrings
        writeln!(file, "//! UUIDs for the {} module\n", file_name.replace('_', " "))?;
        writeln!(file, "// This file is auto-generated by the update_uuids application")?;
        writeln!(file, "// Based on https://bitbucket.org/bluetooth-SIG/public.git\n")?;

        writeln!(file, "use super::BleUuid;\n")?;

        write!(file, "{}", tokens)?;
    }
    Ok(())
}
